const { test } = QUnit;

QUnit.module( "Testing convertUtcDateToMillis", () => {
  test( "1970-01-01 -> 0", assert => {
    assert.equal( convertUtcDateToSeconds(new Date('1970-01-01')), 0 );
  });

  test( "2000-01-01 -> 946684800", assert => {
    assert.equal( convertUtcDateToSeconds(new Date('2000-01-01')), 946684800 );
  });
});

QUnit.module( "Testing convertMillisecondsToDateString", () => {
  test( "0 -> 1 Jan 1970", assert => {
    assert.equal( convertMillisecondsToDateString(0), '1 Jan 1970' );
  });

  test( "1638709615000 -> 5 Dec 2021", assert => {
    assert.equal( convertMillisecondsToDateString(1638709615000), '5 Dec 2021' );
  });
});

QUnit.module( "Testing getDailyData", () => {
  test( "Hourly data, 2021-01-01 - 2021-01-03", assert => {
    const arrGiven = [[1609460362756,23665.77848848362],[1609463070685,23757.408460441442],[1609467940130,24111.54070509417],[1609470855518,24041.098529593808],[1609474283677,24172.156428993898],[1609478344762,23965.62345796494],[1609481421862,23989.04410676807],[1609486406550,23866.329274863358],[1609489838357,23805.34353199999],[1609492648337,23938.019762395776],[1609495981213,24087.36995117138],[1609500778030,24148.273898718475],[1609504462159,24278.48504268783],[1609506486655,24156.726869987633],[1609511140190,24286.629350642896],[1609514953472,24185.05573111683],[1609518088976,24041.229703297726],[1609520896322,24112.51887238375],[1609525021276,24123.168560879945],[1609527668726,23999.480039512997],[1609531305178,23994.238529846352],[1609535617928,24075.94897597461],[1609538714549,24040.432027508174],[1609542544109,24067.441550130767],[1609547209683,24091.181252325743],[1609549621187,24080.58190145002],[1609553227754,24220.199733083646],[1609557435478,24195.882993500578],[1609561580271,24179.838601536107],[1609564101430,24212.718859972647],[1609568835512,24399.762360167937],[1609570923185,24497.146655291865],[1609575171405,24600.372696828068],[1609578830667,24598.039964353593],[1609581830286,24556.113606727737],[1609585943448,24560.824719954384],[1609590024499,24614.76833191813],[1609593161008,25230.032520006185],[1609597889938,25713.196527811626],[1609600903268,25789.64576156446],[1609604796877,26548.936161292637],[1609608804810,26956.15694889708],[1609612321092,26944.95055586657],[1609614992146,27179.899991167837],[1609618174025,27246.902652494453],[1609622851075,26131.043972385574],[1609624999022,26174.984539596328],[1609629804722,26358.432373769923],[1609633500408,26452.832029780126]]
    const arrExpected = [
      [1609460362756, 23665.77848848362],
      [1609547209683, 24091.181252325743],
      [1609633500408, 26452.832029780126],
    ]
    assert.deepEqual( getDailyData(arrGiven, 1609459200, 1609635600), arrExpected );
  });

  test( "Daily data, 2017-01-01 - 2017-01-03", assert => {
    const arrGiven = [[1483228800000,948.7433000000003],[1483315200000,973.7802],[1483401600000,994.3156]]
    const arrExpected = [
      [1483228800000, 948.7433000000003],
      [1483315200000, 973.7802 ],
      [1483401600000, 994.3156 ]
    ]
    assert.deepEqual( getDailyData(arrGiven, 1483228800, 1483405200), arrExpected );
  });
});

QUnit.module( "Testing getMaxValue", () => {
  test( "Max Value in the middle", assert => {
    const arrGiven = [[1638316954745,31524188369.374973],[1638403476369,43628019842.81716],[1638489808780,32099359905.2658],[1638576024639,34934931823.65049]]
    const valueExpected = {date: '2 Dec 2021', value: 43628019842.81716}
    assert.deepEqual( getMaxValue(arrGiven), valueExpected );
  });
  test( "Max Value in the beginning", assert => {
    const arrGiven = [[1638403476369,43628019842.81716],[1638489808780,32099359905.2658],[1638576024639,34934931823.65049]]
    const valueExpected = {date: '2 Dec 2021', value: 43628019842.81716}
    assert.deepEqual( getMaxValue(arrGiven), valueExpected );
  });
  test( "Max Value in the end", assert => {
    const arrGiven = [[1638144160131,24501168977.228058],[1638230627958,27436802911.974957],[1638316954745,31524188369.374973],[1638403476369,43628019842.81716]]
    const valueExpected = {date: '2 Dec 2021', value: 43628019842.81716}
    assert.deepEqual( getMaxValue(arrGiven), valueExpected );
  });
});

QUnit.module( "Testing getMaxDecrease", () => {
  test( "Only decrease for the whole period", assert => {
    const arrGiven = [[1594598536517,8219.669309084125],[1594685112193,8143.320003791694],[1594771251921,8105.9734060818755],[1594857754101,8057.880366504821],[1594944152987,8020.392732170293],[1595030544889,8010.127432949405]]
    const valueExpected = 5
    assert.deepEqual( getMaxDecrease(arrGiven), valueExpected );
  });
  test( "One decrease in the beginning", assert => {
    const arrGiven = [[1594598536517,8219.669309084125],[1594685112193,8143.320003791694],[1594771251921,8105.9734060818755],[1594857754101,8057.880366504821],[1594944152987,8020.392732170293],[1595030544889,8010.127432949405],[1595116986990,8021.70143789932],[1595203412668,8041.75186442637]]
    const valueExpected = 5
    assert.deepEqual( getMaxDecrease(arrGiven), valueExpected );
  });
  test( "No decrease", assert => {
    const arrGiven = [[1638662414715,43452.36627055587],[1638748803059,43584.415787737744],[1638835431736,44721.77431769078],[1638921797080,44927.87083488738]]
    const valueExpected = 0
    assert.deepEqual( getMaxDecrease(arrGiven), valueExpected );
  });
  test( "Two times decrease, second is longer than first", assert => {
    const arrGiven = [[1638057807617,48327.24785511488],[1638144160131,50701.97880015172],[1638230627958,51223.98984043126],[1638316954745,50310.23157858034],[1638403476369,50506.910551023844],[1638489808780,49974.160510668],[1638576024639,47537.22107822653],[1638662414715,43452.36627055587],[1638748803059,43584.415787737744],[1638835431736,44721.77431769078],[1638921797080,44927.87083488738]]
    const valueExpected = 3
    assert.deepEqual( getMaxDecrease(arrGiven), valueExpected );
  });
});

QUnit.module( "Testing getBuySellDays", () => {
  test( "Price increasing", assert => {
    // note: arrGiven period starts from 5 Dec and ends 8 Dec
    const arrGiven = [[1638662414715,43452.36627055587],[1638748803059,43584.415787737744],[1638835431736,44721.77431769078],[1638921797080,44927.87083488738]]
    const valueExpected = {dateForBuy: '5 Dec 2021', dateForSale: '8 Dec 2021'}
    assert.deepEqual( getBuySellDays(arrGiven), valueExpected );
  });
  test( "Price changing", assert => {
    // note: arrGiven period starts from 1 Dec and ends 10 Dec
    const arrGiven = [[1638316954745,50310.23157858034],[1638403476369,50506.910551023844],[1638489808780,49974.160510668],[1638576024639,47537.22107822653],[1638662414715,43452.36627055587],[1638748803059,43584.415787737744],[1638835431736,44721.77431769078],[1638921797080,44927.87083488738],[1639008302495,44540.22385241009],[1639094574478,42404.08890755657]]
    const valueExpected = {dateForBuy: '5 Dec 2021', dateForSale: '8 Dec 2021'}
    assert.deepEqual( getBuySellDays(arrGiven), valueExpected );
  });
});